/* tslint:disable */
/* eslint-disable */
/**
 * Medical Records API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
import type { AxiosResponse, AxiosInstance, AxiosRequestConfig } from "axios";
import type { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import type { MedicalAct } from '../models';
/**
 * MedicalActApi - axios parameter creator
 * @export
 */
export const MedicalActApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a list of medical acts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicalActGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/medical_act`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a medical act by ID
         * @param {number} id Medical act id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicalActIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling medicalActIdDelete.');
            }
            const localVarPath = `/medical_act/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a medical act by ID
         * @param {number} id Medical act id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicalActIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling medicalActIdGet.');
            }
            const localVarPath = `/medical_act/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a medical act by ID
         * @param {MedicalAct} body 
         * @param {number} id Medical act id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicalActIdPut: async (body: MedicalAct, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling medicalActIdPut.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling medicalActIdPut.');
            }
            const localVarPath = `/medical_act/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            //@ts-ignore
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new medical act
         * @param {MedicalAct} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicalActPost: async (body: MedicalAct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling medicalActPost.');
            }
            const localVarPath = `/medical_act`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            //@ts-ignore
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of medical acts by user id
         * @param {number} id User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        medicalActUserIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling medicalActUserIdGet.');
            }
            const localVarPath = `/medical_act/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MedicalActApi - functional programming interface
 * @export
 */
export const MedicalActApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a list of medical acts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicalActGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<MedicalAct>>>> {
            const localVarAxiosArgs = await MedicalActApiAxiosParamCreator(configuration).medicalActGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete a medical act by ID
         * @param {number} id Medical act id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicalActIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MedicalActApiAxiosParamCreator(configuration).medicalActIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get a medical act by ID
         * @param {number} id Medical act id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicalActIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MedicalAct>>> {
            const localVarAxiosArgs = await MedicalActApiAxiosParamCreator(configuration).medicalActIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update a medical act by ID
         * @param {MedicalAct} body 
         * @param {number} id Medical act id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicalActIdPut(body: MedicalAct, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MedicalAct>>> {
            const localVarAxiosArgs = await MedicalActApiAxiosParamCreator(configuration).medicalActIdPut(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create a new medical act
         * @param {MedicalAct} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicalActPost(body: MedicalAct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MedicalAct>>> {
            const localVarAxiosArgs = await MedicalActApiAxiosParamCreator(configuration).medicalActPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get a list of medical acts by user id
         * @param {number} id User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicalActUserIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<MedicalAct>>>> {
            const localVarAxiosArgs = await MedicalActApiAxiosParamCreator(configuration).medicalActUserIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MedicalActApi - factory interface
 * @export
 */
export const MedicalActApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get a list of medical acts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicalActGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<MedicalAct>>> {
            return MedicalActApiFp(configuration).medicalActGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a medical act by ID
         * @param {number} id Medical act id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicalActIdDelete(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MedicalActApiFp(configuration).medicalActIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a medical act by ID
         * @param {number} id Medical act id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicalActIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<MedicalAct>> {
            return MedicalActApiFp(configuration).medicalActIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a medical act by ID
         * @param {MedicalAct} body 
         * @param {number} id Medical act id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicalActIdPut(body: MedicalAct, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<MedicalAct>> {
            return MedicalActApiFp(configuration).medicalActIdPut(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new medical act
         * @param {MedicalAct} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicalActPost(body: MedicalAct, options?: AxiosRequestConfig): Promise<AxiosResponse<MedicalAct>> {
            return MedicalActApiFp(configuration).medicalActPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of medical acts by user id
         * @param {number} id User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async medicalActUserIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<MedicalAct>>> {
            return MedicalActApiFp(configuration).medicalActUserIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MedicalActApi - object-oriented interface
 * @export
 * @class MedicalActApi
 * @extends {BaseAPI}
 */
export class MedicalActApi extends BaseAPI {
    /**
     * 
     * @summary Get a list of medical acts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalActApi
     */
    public async medicalActGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<MedicalAct>>> {
        return MedicalActApiFp(this.configuration).medicalActGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete a medical act by ID
     * @param {number} id Medical act id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalActApi
     */
    public async medicalActIdDelete(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MedicalActApiFp(this.configuration).medicalActIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get a medical act by ID
     * @param {number} id Medical act id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalActApi
     */
    public async medicalActIdGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<MedicalAct>> {
        return MedicalActApiFp(this.configuration).medicalActIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update a medical act by ID
     * @param {MedicalAct} body 
     * @param {number} id Medical act id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalActApi
     */
    public async medicalActIdPut(body: MedicalAct, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<MedicalAct>> {
        return MedicalActApiFp(this.configuration).medicalActIdPut(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create a new medical act
     * @param {MedicalAct} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalActApi
     */
    public async medicalActPost(body: MedicalAct, options?: AxiosRequestConfig) : Promise<AxiosResponse<MedicalAct>> {
        return MedicalActApiFp(this.configuration).medicalActPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get a list of medical acts by user id
     * @param {number} id User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalActApi
     */
    public async medicalActUserIdGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<MedicalAct>>> {
        return MedicalActApiFp(this.configuration).medicalActUserIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}
